<?phpnamespace App\Controller;use App\Entity\Evenement;use App\Entity\EvenementSearch;use App\Form\EvenementsearchType;use App\Form\RechercheEvenementType;use App\Form\RechercheType;use App\Repository\MapMarkerRepository;use PhpParser\Node\Stmt\While_;use Symfony\Component\Form\AbstractType;use App\Form\SearchEvenementType;use Symfony\Component\Form\FormTypeInterface;use FOS\UserBundle\Model\Evenement as BaseEvenementSearchr;use App\Repository\EvenementRepository;use Doctrine\Common\Persistence\ObjectManager;use Knp\Component\Pager\PaginatorInterface;use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\Routing\Annotation\Route;use Symfony\Component\Form\Exception\ExceptionInterface;use Symfony\Component\Form\Exception\InvalidArgumentException;use Symfony\Component\Form\Exception\LogicException;use Symfony\Component\Form\Exception\UnexpectedTypeException;use Symfony\Component\Serializer\Encoder\JsonEncoder;use Symfony\Component\Serializer\Serializer;use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;use Symfony\Component\Serializer\Encoder\XmlEncoder;use Symfony\Component\PropertyAccess\PropertyAccess;use \DOMDocument;use Symfony\Component\OptionsResolver\OptionsResolverInterface;use Symfony\Component\Form\Extension\Core\Type\StringtType;use Symfony\Component\Form\Extension\Core\Type\TextType;class HomeController extends AbstractController{    /**     * @Route("/home/index", name="home")     */    public function index(EvenementRepository $repository,                          Request $request, PaginatorInterface $paginator)    {        $search = new EvenementSearch();        $searchform = $this->createForm(SearchEvenementType::class, $search);        if ($searchform->handleRequest($request)->isSubmitted() && $searchform->isValid()) {            $search = $searchform->getData();            $searchEvenements = $repository->findAllBy($search);            $evenements = $paginator->paginate(            // Doctrine Query, not results                $searchEvenements,                // Define the page parameter                $request->query->getInt('page', 1),                // Items per page                8 );            var_dump(dirname('__XML__'));            $filename = "../public/xml/point.xml";            if (file_exists($filename)) {                unlink($filename);                echo 'loading.....';            } else {                echo "le fichier n'exite pas";            }            $xw = xmlwriter_open_memory('<?xml version ="1.0" encoding="utf-8" standLone= "yes" ?>');            xmlwriter_set_indent($xw, 1);            $xml= '/* <features> */<markers>';            foreach( $evenements as $key =>$row) {                $id = $row->getId();                $Lat = $row->getLat();                $lng = $row->getLng();                $name =$row->getName();                $address=$row->getAddress();                $image =$row->getImage();                $type =$row->getType();                $xml .="<marker id='$id' name ='$name'  address ='$address'  lat ='$Lat' lng = '$lng' type ='$type' image='$image' />";            }            /* dump($row); */            /* $xml.= '</markers>';  */            file_put_contents($filename, $xml);            //ajouter les donnée du marker sur fichier xml        } else  {            $allEvenements = $repository->findAll();            dump( $allEvenements);            $evenements = $paginator->paginate(            // Doctrine Query, not results                $allEvenements,                // Define the page parameter                $request->query->getInt('page', 1),                // Items per page                12            );            //ajouter les donnée du marker sur fichier xml            $filename = "../public/xml/point.xml";            if (file_exists($filename)) {                unlink($filename);            } else {                /*   echo "le fichier n'exite pas"; */            }            $xw = xmlwriter_open_memory('<?xml version ="1.0" encoding="utf-8" standLone= "yes" ?>');            xmlwriter_set_indent($xw, 1);            $xml= '<coordinates>';            foreach( $allEvenements as $key =>$row) {                $id = $row->getId();                $Lat = $row->getLat();                $lng = $row->getLng();                $name =$row->getName();                $address=$row->getAddress();                $image =$row->getImage();                $type =$row->getType();                dump($row);                $xml .="<coordinates  lat ='$Lat' lng = '$lng'  />";                /*  $xml .="<features  geometry='null' coordinates='$Lat ,$lng' type ='point' id='$id' name ='$name'  address ='$address'   image='$image' />";  */            }        }        $xml.= '</coordinates>';        file_put_contents($filename, $xml);        $axml = simplexml_load_string($xml);        /* str_replace('"', '&#34;', $xml); */        $json = json_encode( $axml);        $array = json_decode($json,TRUE);        $jsonString = file_get_contents('jsonFile.json');        $features = array();        foreach($array  as $i=> $value) {////          $lat= $value->lat;//            $lng=$value [$i]['lng'];            $features[] = array(               'type' => 'Feature',//               'properties' => array('time' => $value['time']),                'geometry' => array(                   'type' => 'Point',                    'coordinates' => array(                      $value,                        1                    ),                ),            );        }        $new_data = array(           'type' => 'FeatureCollection',            'features' => $features,        );        $final_data = json_encode($new_data, JSON_PRETTY_PRINT);        file_put_contents('jsonFile.json',  $final_data);//        print_r($final_data);        /*   foreach( $allEvenements as $key =>$row) {          $id = $row->getId();          $Lat = $row->getLat();          $lng = $row->getLng();          $name =$row->getName();          $address=$row->getAddress();          $image =$row->getImage();          $type =$row->getType();          dump($row);          } *///        $axml = simplexml_load_string($xml);        /* str_replace('"', '&#34;', $xml); *///        $json = json_encode( $axml);//        $array = json_decode($json,TRUE);//        $jsonString = file_get_contents('jsonFile.json');        /*  $encoders = [new XmlEncoder(), new JsonEncoder()];      $normalizers = [new ObjectNormalizer()];      $serializer = new Serializer($normalizers, $encoders);      $allEvenements = $serializer->serialize($jsonString, 'json');       $newJsonString = json_encode( $xml) */;//        file_put_contents('jsonFile.json', $json);        return $this->render('home/index.html.twig', [            /* 'var' => $xml,            'var' => $filename, */            'evenement' => $evenements,            'evenementFormSearchType' => $searchform->createView()        ]);    }    /**     * @Route("/home-allEvents", name="home.allEvents")     */    public function allEvents( EvenementRepository $repository,MapMarkerRepository $map,                               Request $request, PaginatorInterface $paginator)    {        $allEvenements = $repository->findAll();        $evenements = $paginator->paginate(        // Doctrine Query, not results            $allEvenements,            // Define the page parameter            $request->query->getInt('page', 1),            // Items per page            12        );        return $this->render('home/allEvents.html.twig', [            'evenement' => $evenements,            /*'evenementFormSearchType' => $form->createView()*/        ]);    }    /**     * @Route("/base", name="base")     */    public function footer(EvenementRepository $repository)    {        $evenement = $repository->findBy();        /* $user = 96;         $evenement= $repository->findByLatestPost( $user);*/        return $this->render('base.html.twig', [            'evenement' => $evenement,        ]);    }    /*public function index(objectManager $manager,Request $request, PaginatorInterface $paginator)    {        $search = new EvenementSearch();        $form = $this->createForm(SearchEvenementType::class, $search);        $form->handleRequest($request);        if ($form->isSubmitted() && $form->isValid()) {            $manager->persist($search);            $manager->flush();            $this->addFlash('success', "bien enregistré !");            return $this->redirectToRoute('home');*/    /* $allEvenements = $repository->findAll();*/    /*$evenements = $paginator->paginate(        $this->$repository->findByFilter($search)*/    // Doctrine Query, not results    /* $allEvenements,*/    // Define the page parameter    /*/$request->query->getInt('page', 1),     // Items per page     12 ); dump('bonjour'); return $this->render('home/index.html.twig', array([     'evenement' => $evenements,     'form' => $form->createView() ]));}}*/}
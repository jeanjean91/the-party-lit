<?php

namespace App\Repository;

use App\Entity\Evenement;
use App\Entity\EvenementSearch;
use App\Form\RechercheEvenementType;
use App\Form\RechercheType;
use App\Form\SearchEvenementType;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\Query;
use phpDocumentor\Reflection\DocBlock\Tags\Return_;
use phpDocumentor\Reflection\Types\This;
use PhpParser\Node\Scalar\String_;
use Symfony\Bridge\Doctrine\RegistryInterface;


/**
 * @method Evenement|null find($id, $lockMode = null, $lockVersion = null)
 * @method Evenement|null findOneBy(array $criteria, array $orderBy = null)
 * @method Evenement[]    findAll()
 * @method Evenement[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class EvenementRepository extends ServiceEntityRepository
{
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, Evenement::class);
    }


    public function findBid($user):array
    {
        $connect =$this->createQueryBuilder('e')
            ->andWhere('e.user = :user')
            ->setParameter('user', $user)
             /*->orderBy('e.user', 'DESC')*/
            ->setMaxResults(1)
            ->getQuery()
            /* ->getResult()*/
        ;
        return $connect ->execute();
    }
 public function findCoordoner()
 {
     $entityManager = $this ->getEntityManager();
     $connect= $entityManager ->createQuery("
           
           SELECT 'lat'  ,'lng'
             FROM App\Entity\Evenement 
            ");

 }


     /**
      * @return Evenement[] Returns an array of Evenement objects
      */
    public function findByuserevent($user):array
    {
        $connect =$this->createQueryBuilder('e')

            ->andWhere('e.user = :user')
            ->setParameter('user', $user)
            ->orderBy('e.date', 'DESC')
           /* ->setMaxResults()*/
            ->getQuery();
            /* ->getResult()*/

        return $connect ->execute();


        $entityManager = $this ->getEntityManager();
        $connect= $entityManager ->createQuery("
           
            SELECT  distinct COUNT( e.id) as event
             FROM App\Entity\Evenement e
            WHERE e.user = $user")

            ->setParameter('user', $user)


        ;

        return $connect->execute();




    }
    public function count(array $criteria)
    {
       // return parent::count($criteria); // TODO: Change the autogenerated stub


    }

    public function findByEvent($user)
    {

       /* return $this->createQueryBuilder('e')
            ->select('COUNT(e.id)as eventFROM App\Entity\Evenement e
            WHERE e.id = :user')
            ->getQuery();*/





       $entityManager = $this ->getEntityManager();
            $connect= $entityManager ->createQuery("
           
            SELECT  distinct COUNT( e.id) as event
             FROM App\Entity\Evenement e
            WHERE e.user = 38");

                /*->setParameter('user', $value)*/




        return $connect->execute();
    }

    /**
     * @return evenements[] Returns an array of evenements objects
     */
    public function apiFindAll(): array
    {
        $qb = $this->createQueryBuilder('e')
            ->select('e.id', 'e.name', 'e.contry', 'e.image', 'e.city','e.address','e.date','e.Lat','e.lng')
            ->orderBy('e.date', 'DESC');

        $query = $qb->getQuery();

        return $query->execute();
    }

    /*public function findByEvent($user){

        $entityManager = $this ->getEntityManager();
        $connect= $entityManager ->createQuery("
           
           SELECT COUNT(e.id)  as event
             FROM App\Entity\Evenement e
            WHERE e.user = :id")




            ->setParameter('id', $user)


        ;

        return $connect->execute();
    }*/

    public function findByAppUer($user):array
    {
        $connect =$this->createQueryBuilder('e')
            ->andWhere('e.user = :user')
            ->setParameter('user', $user)
             ->orderBy('e.date', 'DESC')
            ->setMaxResults(38)
            ->getQuery()
            /* ->getResult()*/
        ;
        return $connect ->execute();
    }
    /**
     * @return Query
     */

  /*  public function findAllBy(EvenementSearch $search)
    {

        return $this->createQueryBuilder('e')


                 ->andWhere('e.contry = :Contry')
                -> setParameter('Contry',$search->getContry())
                 ->andWhere('e.city = :City')
                 -> setParameter('City',$search->getCity())
                ->andWhere('e.type = :Type')
                 -> setParameter('Type',$search->getType())
              //  ->andWhere('e.date <= :Date')
              //  -> setParameter('Date',$search->getDate())
                ->getQuery()
                ->getResult();
                //->orderBy('e.date', 'DESC')



        $lngLat[] = [ $lng,$lat];

    }*/
    /**
     * @param EvenementSearch $search
     * @return Query
     */
    public function findAllBy(EvenementSearch $search):Query
    {

       /* condition des requette pour la recherche d'evenement'*/

        $query= $this->createQueryBuilder('e');

        if ($search->getContry()){
            $query = $query
                ->andWhere('e.contry = :contry')
                -> setParameter('contry', $search->getContry());
        }


        if ($search->getCity()){
            $query = $query
                ->andWhere('e.city = :city')
                -> setParameter('city', $search->getCity());
        }

        if ($search->getType()){
            $query = $query
                ->andWhere('e.type = :type')
                -> setParameter('type', $search->getType());
        }

        if ($search->getDate()){
            $query = $query
                ->andWhere('e.date = :date')
                -> setParameter('date', $search->getDate());
        }

        return $query->getQuery();

    }







    public function findByLatestPost($type):array
    {
        $latest =$this->createQueryBuilder('e')
            ->andWhere('e.user = :user')
            ->setParameter('user', $type)
            ->orderBy('e.date', 'DESC')
            ->setMaxResults(12)
            ->getQuery()
            /* ->getResult()*/
        ;
        return  $latest ->execute();
    }


    /*
    public function findOneBySomeField($value): ?Evenement
    {
        return $this->createQueryBuilder('e')
            ->andWhere('e.exampleField = :val')
            ->setParameter('val', $value)
            ->getQuery()
            ->getOneOrNullResult()
        ;
    }
    */
}
